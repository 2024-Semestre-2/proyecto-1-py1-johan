package View;

import Model.BCP;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author johan
 */
public class Principal extends javax.swing.JFrame {
    private JTable table;
    private DefaultTableModel tableModel;
    private int processCounter = 1;
    
    private JTable bcpTable;
    private DefaultTableModel bcpTableModel;
    
    private JTable memoryTable;
    private DefaultTableModel memoryTableModel;
    
    private JTable diskTable;
    private DefaultTableModel diskTableModel;
    
    private ConsolePanel consolePanel;
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        process();
        bcpFrame();
        MemoryFrame();
        DiskFrame();
        setupConsolePanel();
    }
    
    private void setupConsolePanel() {
        consolePanel = new ConsolePanel();
        JScrollPane consoleScrollPane = new JScrollPane(consolePanel);
        consoleScrollPane.setBounds(350, 320, 300, 140); // Ajusta estos valores según necesites
        add(consoleScrollPane);
    }
    
    private void process(){
        setTitle("Simulación de Procesos");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLayout(null);

        // Crear el modelo de la tabla
        tableModel = new DefaultTableModel(new String[]{"Procesos", "Estados"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // No permitir edición en la tabla
                return false; 
            }
        };
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(30, 60, 300, 400);
        add(scrollPane);

        setVisible(true);
    }
    
    public ConsolePanel getConsolePanel() {
        return consolePanel;
    }
    
    private void bcpFrame(){
        bcpTableModel = new DefaultTableModel(
            new Object[][] {},
            new String[] {"Property", "Value"}
        );
        bcpTable = new JTable(bcpTableModel);
        JScrollPane scrollPane = new JScrollPane(bcpTable);
        
        //JScrollPane scrollPane = new JScrollPane(bcpTable);
        scrollPane.setBounds(350, 60, 300, 250);
        add(scrollPane);
        
        // Otros componentes de la ventana...
        setVisible(true);
    }
    
    private void MemoryFrame(){
        setTitle("Memoria");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLayout(null);

        // Crear el modelo de la tabla
        memoryTableModel = new DefaultTableModel(new String[]{"Pos", "Valor en memoria"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // No permitir edición en la tabla
                return false; 
            }
        };
        memoryTable = new JTable(memoryTableModel);
        JScrollPane scrollPane = new JScrollPane(memoryTable);
        scrollPane.setBounds(670, 60, 300, 400);
        add(scrollPane);

        setVisible(true);
    }
    
    private void DiskFrame(){
        setTitle("Memoria");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLayout(null);

        // Crear el modelo de la tabla
        diskTableModel = new DefaultTableModel(new String[]{"Pos", "Valor en Disco"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // No permitir edición en la tabla
                return false; 
            }
        };
        diskTable = new JTable(diskTableModel);
        JScrollPane scrollPane = new JScrollPane(diskTable);
        scrollPane.setBounds(990, 60, 300, 400);
        add(scrollPane);

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Search = new javax.swing.JButton();
        Settings = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        next = new javax.swing.JButton();
        Execute = new javax.swing.JButton();
        Stadistics = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Settings.setText("Settings");
        Settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        Execute.setText("Execute");
        Execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteActionPerformed(evt);
            }
        });

        Stadistics.setText("Stadistics");
        Stadistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StadisticsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Reset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(next)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Execute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Stadistics)
                .addGap(12, 12, 12)
                .addComponent(Settings)
                .addContainerGap(248, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Search)
                    .addComponent(Settings)
                    .addComponent(Reset)
                    .addComponent(next)
                    .addComponent(Execute)
                    .addComponent(Stadistics))
                .addContainerGap(461, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchActionPerformed

    private void SettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsActionPerformed

    }//GEN-LAST:event_SettingsActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResetActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nextActionPerformed

    private void ExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExecuteActionPerformed

    private void StadisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StadisticsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StadisticsActionPerformed

    
    public JButton getSearch() {                                     
        return Search;
    }
    
    public JButton getSettings() {                                     
        return Settings;
    }
    
    public JButton getNextButton() {
        return next;
    }
    
    public void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    public void SetSearch(String content) {                                     
        //jTextArea1.setText(content);
    }
    
    public void SetNext(String content) {                                     
        //jTextArea4.setText(content);
    }
    
    public void SetBCP(String content) {                                     
        //jTextArea5.setText(content);
    }
    
    public JButton getReset() {
        return Reset;
    }

    public void ResetContent() {
        //jTextArea1.setText("");
    }
    
    public void ResetNext() {
        //jTextArea4.setText("");
    }
    
    public void ResetBCP() {
        //jTextArea5.setText("");
    }
    
    public void addProcess(String name, String state) {
        tableModel.addRow(new Object[]{processCounter + " - " + name, state}); // Agregar el proceso con nombre y estado
        processCounter++; // Incrementar el contador
    }
    
    public void addMemoryEntry(String position, String value) {
        memoryTableModel.addRow(new Object[]{position, value});
    }

    public void addDiskEntry(String position, String value) {
        diskTableModel.addRow(new Object[]{position, value});
    }

    public void updateProcessState(int rowIndex, String state) {
        if (rowIndex >= 0 && rowIndex < tableModel.getRowCount()) {
            tableModel.setValueAt(state, rowIndex, 1); // Actualiza el estado en la columna "Estados"
        }
    }
    
    public void updateBCPTable(String[][] data) {
        bcpTableModel.setRowCount(0);
        for (String[] row : data) {
            bcpTableModel.addRow(row);
        }
    }
    
    public void clearMemoryTable() {
        memoryTableModel.setRowCount(0);
    }
    
    public void clearDiskTable() {
        diskTableModel.setRowCount(0);
    }
    
    public void clearProcessTable() {
        tableModel.setRowCount(0);
    }
    
    public void clearBCPTable() {
        bcpTableModel.setRowCount(0);
    }
    public JButton getExecuteButton() {
        return Execute;
    }
    
    public void highlightMemoryEntry(int position) {
        for (int i = 0; i < memoryTable.getRowCount(); i++) {
            String posStr = memoryTable.getValueAt(i, 0).toString();
            if (Integer.parseInt(posStr) == position) {
                memoryTable.setRowSelectionInterval(i, i);
                break;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Execute;
    private javax.swing.JButton Reset;
    private javax.swing.JButton Search;
    private javax.swing.JButton Settings;
    private javax.swing.JButton Stadistics;
    private javax.swing.JButton next;
    // End of variables declaration//GEN-END:variables
}
